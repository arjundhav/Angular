What is node js used for?
- Node. js is an open-source, cross-platform JavaScript runtime environment and library for running web applications outside the client's browser.

What node js can do?
-   Node.js can generate dynamic page content
    Node.js can create, open, read, write, delete, and close files on the server
    Node.js can collect form data
    Node.js can add, delete, modify data in your database

Npm is a package manager for the javascript libraries and frameworks.


commands: 

nvm list      // node version manager
nvm use versionNum
node -v 
npm install typescript -g                //node package manager
npm list -g              //installed packages
tsc --v
tsc a.ts
tsc a.ts --watch


TypeScript:      It is open source OOP language.
                 It is strongly typed superset of JS which complies to plain JS
                 It contain all elements of JS.

Why use TS:    It supports static typing,strongly  typed,modules,optional params.
               It suppports the classes,interfaces,inheritance,polymorphism,generics,enums.
               It is fast,clean,simple & easy to learn.
               It provides error -checking feature at compilation time.


JavaScript: 
            It is a lightweight ,dynamic, interpreted or just-in-time compiled programming language.
            JavaScript can update and change both HTML and CSS.
            JavaScript can calculate, manipulate and validate data.

            JS dynamic capabilities include runtime object construction, variable parameter lists, function variables, object introspection (via for...in and Object utilities)
               and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()).                 

Rest Operators: 
   The rest parameter syntax allows a function to accept an indefinite number of arguments as an array             
syntax: 
       function f(a, b, ...theArgs) {
                       // â€¦
        }



CMD to create app: ng new appName
Run App: ng serve

Component:

command: ng g c Nav       //ng generate component componentName

A component file, <component-name>.component.ts
A template file, <component-name>.component.html
A CSS file, <component-name>.component.css
A testing specification file, <component-name>.component.spec.ts



Module: ng g m user

Directives:
 
 Component - Responsible for HTML layout  
 structural - change dom by add/remove element *ngIf , *ngFor,*ngSwitch
 Attributes -  change appearance or behaviour of dom

 only in html:
 #   - variable name
 []  - property binding
 ()  - event binding
[()] - two way binding
  *  - structural Directives
{{}} - string interpolation



Decorators: Decorators are design patterns used to isolate the modification or decoration of a class without modifying the source code.
            used for passing meta

4 types: class, property, method, parameters decorators

  Class decorators, such as @Component and @NgModule
  Property decorators for properties inside classes, such as @Input and @Output
  Method decorators for methods inside classes, such as @HostListener
  Parameter decorators for parameters inside class constructors, such as @Inject

@ng-Module - Class Decorators
@component - Class Decorators
@Injectable - define services
@input @output : used for passing data from DOM - property

To install bootstrap: npm i bootstrap@5.1.3

then configure angular.json file style & scripts by giving path pf bootstrap dist folder
Then restart app with ng serve bootstrap will be enabled.

Routing

    Load the router library
    Add a nav bar to the shell template with anchor tags, routerLink and routerLinkActive directives
    Add a router-outlet to the shell template where views are displayed
    Configure the router module with RouterModule.forRoot()
    Set the router to compose HTML5 browser URLs
    Handle invalid routes with a wildcard route
    Navigate to the default route when the application launches with an empty path

CMD for Routing:
      ng generate module my-module --routing
      ng g m user --routing

This creates a separate file named user-routing.module.ts to store the NgModule's routes

CMD:   
       ng generate module my-module --routing  
       ng generate module app-routing --flat --module=app
       ng g m user-routing --flat --module=user


AuthGuard:  AuthGuard is used to protect the routes from unauthorized access in angular.
 cmd: ng g guard auth 

 - caNActive: canActivate has to return true to access the page. If it returns false, we can not access the page.
 - canActivateChild
 - cCanDeactivate
 - canLoad


Lazy loading is a technology of angular that allows you to load JavaScript components when a specific route is activated. 
It improves application load time speed by splitting the application into many bundles.