*ngFor
Ngfor is a structural directive means it changes the structure of the DOM

it's Point is to repeat a given HTML template once for each value in an array,each time
passing it the array value as context for string interpolation or binding.

The syntax is
*ngFor="let<value> of<collection>"

<value> is a variable name of your choosing, <collection> is a property on your component.ts file
which holds a collection, usually an array but anything that can be iterated over in a loop.


*ngFor -Local Variables

*Index - Used for provide the index for current element while iteration.
*First -Return true if current elements is first element in the iteration otherwise false.
*Last - Return true if current element is last element in the iteration otherwise false.
*Even - Return true if current element is even element based on index in the iteration otherwise
       false.
*Odd - Return true if current element is odd element based on index in the iteration otherwise false.

app.component.ts
Students:any[]=[
{
 'name':'Rutuja'
},
{
 'name':'Vaishnavi'
},
{
 'name':'Khushabu'
},
{
 'name':'Namrata'
},
{
 'name':'Janvi'
},
{
 'name':'Roshni'
},
{
 'name':'Pratiksha'
},
{
 'name':'Akshada'
}
];
}

app.component.html
<h2>Using NgFor</h2>
<ul>
<li *ngFor= "let student of Students">
{{Student.name}}
</li>
</ul>

******************************************************

Index with *ngFor directive

Sometimes we also want to get the index of the item in the array we are iteraing over.

We can do this by adding another variable to our ngFor expression and making it equal to index.

The index is always zero based ,so starts at 0 then 1,2,3,4etc...

app.component.html
<h2>Using NgFor</h2>
<ul>
<li *ngFor= "let student of Students ; let i=index">
{{i+1}} - {{Student.name}}
</li>
</ul>
***********************************************************
last, first, even odd
app.component.html
<h2>Using NgFor</h2>
<ul>
<li *ngFor= "let student of Students ; let i=index; let f=first; let l=last; let ev=even; let od=odd">
{{Student.name}}-{{f}}-{{l}}-{{ev}}-{{od}}
</li>
</ul>


*********************************************************************
TrackBy ngFor:
The use of track by its a performance optimization and is usally not needed by deafault,
it's in principle only needed if running into performance issues.

Suppose we have some data coming from some API request into the collection and we need to change the data
over the web page using ngFor directive. In this case, Angular 7 will remove all the DOM tree, even
the same data is coming.That means a lot of Dom manipulates will happen if a large amount of data coming from the API.

The solution is ,we can use trackBy function,which will be helpful for angular to track the items which have been added removed.

TrackBy function will take two arguments first is index and second is current item and we can return the unique indentifier as 
a return argument.

trackByStudentID(index:number,student:any):string{
return student.studentID;
}

app.component.ts
students:any[];
constructor(){
this.Students=[
{
studentid:1,
name:'vishank',
gender:'male',
age:10,
course:'fourth std'
},
{
studentid:2,
name:'vihan',
gender:'male',
age:10,
course:'third std'
},
{
studentid:3,
name:'vrushabh',
gender:'male',
age:14,
course:'seven std'
},
{
studentid:4,
name:'vidip',
gender:'male',
age:9,
course:'secondstd'
}
];
{
getmorestudent():void{
this.Students=[
{
studentid:1,
name:'vishank',
gender:'male',
age:10,
course:'fourth std'
},
{
studentid:2,
name:'vihan',
gender:'male',
age:10,
course:'third std'
},
{
studentid:3,
name:'vrushabh',
gender:'male',
age:14,
course:'seven std'
},
{
studentid:4,
name:'vidip',
gender:'male',
age:9,
course:'secondstd'
},
{
studentid:5,
name:'vedant',
gender:'male',
age:12,
course:'fifthstd'
}

];
}
trackbystudentid(index:number,student:any):string{
return student.studentid
}
]


app.component.html
<h2>Track by example</h2>
<table border ="2" >
<tr *ngFor="let s of Students; let i=index;trackBy:trackbystudentid">
<td>{{i+1}}</td>
<td>{{s.studentid}}</td>
<td>{{s.name}}</td>
<td>{{s.gender}}</td>
<td>{{s.age}}</td>
<td>{{s.course}}</td>

</tr>
</table>
<br>
<button (click)="getmorestudent()">Get more students</button>

***********************************************************************************

Grouping with *ngFor
app.component.ts
constructor(){
}
countrydetails:any[]=[
{
'country':'India',
people:[
{
"name":"Vaishnavi"
},
{
"name":"Rutuja"
},
{
"name":"Khushabu"
},
{
"name":"Janvi"
},
{
"name":"Namrata"
},
],
'country':'UK',
people:[
{
"name":"Abhijeet"
},
{
"name":"Rohit"
},
{
"name":"Sagar"
},
{
"name":"Sarvesh"
},
{
"name":"Anuj"
},
],
]

app.component.html
<ul *ngFor ="let group of countrydetails">
<li>{{group.country}}</li>
<ul>
<li *ngFor ="let person of group.people">
{{person.name}}
</li>
</ul>
</ul>





